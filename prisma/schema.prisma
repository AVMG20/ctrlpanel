// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  accounts      Account[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ticket    Ticket[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Setting {
  code  String  @id
  value String?
}

model Ticket {
  id          String       @id @default(cuid())
  userId      String
  title       String
  priority    String // TODO should be configured in the panel, currenty we use low, medium, high
  status      TicketStatus @default(open)
  description String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TicketStatus {
  open
  in_progress
  closed
}

model Package {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(255)
  description String  @db.Text
  enabled     Boolean

  // limits
  memory Int
  swap   Int
  disk   Int
  io     Int
  cpu    Int

  // feature_limits
  databases   Int
  allocations Int
  backups     Int

  // pterodactyl
  location Int
  nest     Int

  // meta
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
}

model Category {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(255)
  description String? @db.Text
  image       String // This will store path to image
  nest        Int // This corresponds to the nest in Package

  // meta
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
}
